#!/bin/bash

export TEXTDOMAIN=imgtool
export TEXTDOMAINDIR=$PWD/locale

. gettext.sh

. ./imgtool.lib

usage() {
	echo $(gettext "Usage")
}

read_rc_file() {
	local __BLOCKCOUNT=${1}
	local __BLOCKSIZE=${2}
	local __SPLIT=${3}
	local __ROOTMOUNTPOINT=${4}

	if [ -f ~/.imgtoolrc ]; then
		source ~/.imgtoolrc
	else
		if [ -f /etc/imgtoolrc ]; then
			source /etc/imgtoolrc
		fi
	fi

	eval ${__BLOCKCOUNT}="'${BLOCKCOUNT}'"
	eval ${__BLOCKSIZE}="'${BLOCKSIZE}'"
	eval ${__SPLIT}="'${SPLIT}'"
	eval ${__ROOTMOUNTPOINT}="'${ROOTMOUNTPOINT}'"

}

#-- Main code

check_root RESULT

if [ ${RESULT} != 1 ]; then
	$PROGNAME=$0
	echo $(eval_gettext "Script must be run as root, try: sudo \$PROGNAME") ; echo
	exit 1
fi

# Don't want these from the rc file:
WORKDIR=
IMAGEFILE=
FUNCTION=

read_rc_file BLOCKCOUNT BLOCKSIZE SPLIT ROOTMOUNTPOINT

while getopts ':C:D:M:N:c:hr:s:w:z:' flag ; do
	case $flag in
	h)
		usage
		exit 0
	;;
C)
		FUNCTION=cleanup
		WORKDIR=${OPTARG}
		break 2
	;;
	D)
		FUNCTION=mountdevice
		DEVICE=${OPTARG}
	;;
	M)
		FUNCTION=mountimage
		IMAGEFILE=${OPTARG}
	;;
	N)
		FUNCTION=new
		IMAGEFILE=${OPTARG}
	;;
	c)
		BLOCKCOUNT=${OPTARG}
		validate_blockcount ${BLOCKCOUNT}
	;;
	r)
		ROOTMOUNTPOINT=${OPTARG}
		validate_mountpoint ${ROOTMOUNTPOINT}
	;;
	s)
		SPLIT=${OPTARG}
		validate_split ${SPLIT}
	;;
	w)
		WORKDIR=${OPTARG}
	;;
	z)
		BLOCKSIZE=${OPTARG}
		validate_blocksize ${BLOCKSIZE}
	;;
	(?)
		echo $(gettext "Invalid option") >&2
		echo >&2
		usage
		exit 1
	;;
	:)
		echo $(eval_gettext "Option - \$OPTARG requires an argument.") >&2
		echo >&2
		usage
		exit 1
	;;
	esac
done

[ -z ${WORKDIR} ] && { echo $(gettext "Work directory not set") ; echo ; usage; }
if [ ${FUNCTION} = 'mountimage' ] || [ $FUNCTION = 'new' ]; then
	[ -z "${IMAGEFILE}" ] && { echo $(gettext "Image file name not set") ; echo ; usage; }
	[ -z ${ROOTMOUNTPOINT} ] && { echo $(gettext "Root mount-point not set") ; echo ; usage; }
fi

if [ ${FUNCTION} = 'mountdevice' ]; then
	[ -z "${DEVICE}" ] && { echo $(gettext "Device name not set") ; echo ; usage; }
	[ -z ${ROOTMOUNTPOINT} ] && { echo $(gettext "Root mount-point not set") ; echo ; usage; }
fi

if [ ${FUNCTION} = 'new' ]; then
	[ -z ${BLOCKCOUNT} ] && { echo $(gettext "Block count not set") ; echo ; usage; }
	[ -z ${BLOCKSIZE} ] && { echo $(gettext "Block size not set") ; echo ; usage; }
	[ -z ${SPLIT} ] && { echo $(gettext "Split size not set") ; echo ; usage; }
fi

case ${FUNCTION} in
	cleanup)
		clean_up ${WORKDIR} ${ROOTMP}
	;;
	mountimage)
		mount_image ${WORKDIR} ${IMAGEFILE} ${ROOTMOUNTPOINT}
	;;
	mountdevice)
		mount_device ${WORKDIR} ${DEVICE} ${ROOTMOUNTPOINT}
	;;
	new)
		new_image ${WORKDIR} ${IMAGEFILE} ${ROOTMOUNTPOINT} ${BLOCKCOUNT} ${BLOCKSIZE} ${SPLIT}
	;;
esac

exit 0


