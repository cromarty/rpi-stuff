
check_root() {
local  __resultvar=${1}
if [ `whoami` != 'root' ]; then
local myresult=0
else
local myresult=1
fi
eval $__resultvar="'$myresult'"
}


clean_up() {
	local WORKDIR=${1}
	local ROOTMP=${2}

	un_mount_partitions ${WORKDIR}
	remove_mount_points ${WORKDIR}
	remove_loop_devices ${WORKDIR}

	rm ${WORKDIR}/imgtool-mount-points
	rm ${WORKDIR}/imgtool-loop-dev-names

}


loop_devices() {
local WORKDIR=${1}
local IMAGEFILE=${2}

local __BOOTP=${3}
local __ROOTP=${4}

	echo "Setting up the loop device..."

	LOOPDEVICE=$(losetup -f --show ${IMAGEFILE})
	DEVICE=$(kpartx -va ${LOOPDEVICE} | sed -E 's/.*(loop[0-9][0-9]*)p.*/\1/g' | head -1)
	DEVICE="/dev/mapper/${DEVICE}"
BOOTP=${DEVICE}p1
ROOTP=${DEVICE}p2

	eval $__BOOTP="'$BOOTP'"
	eval $__ROOTP="'$ROOTP'"
}


mount_image() {
	      local WORKDIR=${1}
	local IMAGEFILE=${2}
	local ROOTMP=${3}
echo "${IMAGEFILE}"
[ -f "${IMAGEFILE}" ] || { echo "Supplied image file does not exist"; exit 1; }

	echo "Making the work directory if it doesn't exist..."

	[ -d "${WORKDIR}" ] || mkdir -p "${WORKDIR}"

	loop_devices ${WORKDIR} ${IMAGEFILE} BOOTP ROOTP

	sleep 5

	mount_partitions ${WORKDIR} ${BOOTP} ${ROOTP} ${ROOTMP}

		echo "Writing loop device names to ${WORKDIR}/imgtool-loop-dev-names"
		echo -e "${BOOTP}\n${ROOTP}" > "${WORKDIR}/imgtool-loop-dev-names"
		
}


mount_partitions() {
local WORKDIR=${1}
	local BOOTP=${2}
local ROOTP=${3}
	local ROOTMP=${4}
	
	echo "Making the mount point if it doesn't exist..."
	[ -d "${WORKDIR}/${ROOTMP}" ] || mkdir -p "${WORKDIR}/${ROOTMP}"
	mount ${ROOTP} ${WORKDIR}/${ROOTMP}
	[ -d "${WORKDIR}/${ROOTMP}/boot" ] || mkdir -p "${WORKDIR}/${ROOTMP}/boot"
	mount "${BOOTP}" "${WORKDIR}/${ROOTMP}/boot"

	echo "Writing mount-points to ${WORKDIR}/imgtool-mount-points"
	REALBOOTMOUNTPOINT=$(realpath ${WORKDIR}/${ROOTMP}/boot)
	REALROOTMOUNTPOINT=$(realpath ${WORKDIR}/${ROOTMP})
	echo -e "${REALBOOTMOUNTPOINT}\n${REALROOTMOUNTPOINT}" > ${WORKDIR}/imgtool-mount-points


}


    
new_image() {
	    local WORKDIR=${1}
	    	  local IMAGEFILE=${2}
	local ROOTMP=${3}
	local BLOCKCOUNT=${4}
local BLOCKSIZE=${5}
local SPLIT=${6}	    

	echo "Making the work directory if it doesn't exist..."
	[ -d ${WORKDIR} ] || mkdir -p "${WORKDIR}"

	echo "Running dd to make a raw (zero-filled) image"
	dd if=/dev/zero of=${IMAGEFILE} bs=${BLOCKSIZE} count=${BLOCKCOUNT}

	echo "Partitioning the raw image file..."
	parted "${IMAGEFILE}" --script -- mklabel msdos
	echo 'Making the boot partition...'
	parted "${IMAGEFILE}" --script -- mkpart primary fat32 1 ${SPLIT}
	echo 'Setting the boot partition bootable...'
	parted "${IMAGEFILE}" --script set 1 boot on
	echo 'Making the root partition...'
	parted "${IMAGEFILE}" --script -- mkpart primary ext4 ${SPLIT} -1
local BOOTP
local ROOTP

	loop_devices ${WORKDIR} ${IMAGEFILE} BOOTP ROOTP

	echo "Writing loop device names to ${WORKDIR}/imgtool-loop-dev-names"
		LD1PATH=$(realpath ${BOOTP})
	LD2PATH=$(realpath ${ROOTP})
		echo -e "${LD1PATH}\n${LD2PATH}" > "${WORKDIR}/imgtool-loop-dev-names"

	echo "Boot partition is ${BOOTP}"
	echo "Root partition is ${ROOTP}"

	sleep 5

	echo "Making file systems..."
	mkfs.vfat ${BOOTP}
	mkfs.ext4 ${ROOTP}

	mount_partitions ${WORKDIR} ${BOOTP} ${ROOTP} ${ROOTMP}

}

remove_loop_devices() {
	local WORKDIR=${1}	

	echo 'Removing loop devices...'
	[ -f ${WORKDIR}/imgtool-loop-dev-names ] || { echo "${WORKDIR}/loop-dev-names does not exist" ; exit 1 ; }
	cat ${WORKDIR}/imgtool-loop-dev-names | \
	while read LOOP
	do
		echo "Removing loop device ${LOOP}..."
		dmsetup remove "${LOOP}"
	done
	
}


remove_mount_points() {
	local WORKDIR=${1}

	[ -f ${WORKDIR}/mount-points ] || { echo "${WORKDIR}/imgtool-mount-points does not exist" ; exit 1 ; }
	cat ${WORKDIR}/imgtool-mount-points | \
	while read MOUNTPOINT
	do
	    echo "Removing ${MOUNTPOINT}"
		[ -d "${MOUNTPOINT}" ] && rmdir "${MOUNTPOINT}"
	done

}

un_mount_partitions() {
	local WORKDIR=${1}
	
	echo 'umount partitions...'
	cat ${WORKDIR}/imgtool-mount-points | \
	while read MOUNTPOINT
	do
	      echo "umount ${MOUNTPOINT}"
		umount "${MOUNTPOINT}"
	done
	
}
