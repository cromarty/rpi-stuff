
check_root() {
	local  __resultvar=${1}
	if [ `whoami` != 'root' ]; then
		local myresult=0
	else
		local myresult=1
	fi
	eval $__resultvar="'$myresult'"
}


clean_up() {
	local WORKDIR=${1}
#	local ROOTMP=${2}

	un_mount_partitions ${WORKDIR}
	remove_mount_points ${WORKDIR}

	if cat ${WORKDIR}/rpi-image-tool-mount-points | grep loop >/dev/null
	then
		remove_loop_devices ${WORKDIR}
	fi

	rm ${WORKDIR}/rpi-image-tool-mount-points

}


delete_partitions() {
	local DEVICE=${1}

	for PART in `parted -ms /dev/sda -- print | perl -ne "if (m/^\d/) {print;}" | cut -f1 -d':' | sort -r`
	do
		parted ${DEVICE} -- rm ${PART} >/dev/null
	done

}


loop_devices() {
	local WORKDIR=${1}
	local IMAGEFILE=${2}

	local __BOOTP=${3}
	local __ROOTP=${4}

	echo $(gettext "Setting up the loop device") ; echo

	LOOPDEVICE=$(losetup -f --show ${IMAGEFILE})
	DEVICE=$(kpartx -va ${LOOPDEVICE} | sed -E 's/.*(loop[0-9][0-9]*)p.*/\1/g' | head -1)
	DEVICE="/dev/mapper/${DEVICE}"
	BOOTP=${DEVICE}p1
	ROOTP=${DEVICE}p2

	eval $__BOOTP="'$BOOTP'"
	eval $__ROOTP="'$ROOTP'"
}


mount_device() {
	local WORKDIR=${1}
	local DEVICE=${2}
	local ROOTMP=${3}

	[ -b "${DEVICE}" ] || { echo "Supplied device name ${DEVICE} does not exist or is not a block device"; exit 1; }

	echo $(gettext "Making the work directory if it doesn't exist") ; echo

	[ -d "${WORKDIR}" ] || mkdir -p "${WORKDIR}"

	BOOTP=${DEVICE}1
	ROOTP=${DEVICE}2

	sleep 2

	mount_partitions ${WORKDIR} ${BOOTP} ${ROOTP} ${BOOTMP} ${ROOTMP}

}


mount_image() {
	local WORKDIR=${1}
	local IMAGEFILE=${2}
	local BOOTMP=${3}
	local ROOTMP=${4}

	[ -f "${IMAGEFILE}" ] || { echo "Supplied image file does not exist"; exit 1; }

	echo $(gettext "Making the work directory if it doesn't exist") ; echo

	[ -d "${WORKDIR}" ] || mkdir -p "${WORKDIR}"

	loop_devices ${WORKDIR} ${IMAGEFILE} BOOTP ROOTP

	sleep 5

	mount_partitions ${WORKDIR} ${BOOTP} ${ROOTP} ${BOOTMP} ${ROOTMP}

}


mount_partitions() {
	local WORKDIR=${1}
	local BOOTP=${2}
	local ROOTP=${3}
	local BOOTMP=${4}
	local ROOTMP=${5}

	echo $(gettext "Making the boot mount point if it doesn't exist") ; echo
	[ -d "${WORKDIR}/${BOOTMP}" ] || mkdir -p "${WORKDIR}/${BOOTMP}"
	mount ${BOOTP} ${WORKDIR}/${BOOTMP}

	echo $(gettext "Making the root mount point if it doesn't exist") ; echo
	[ -d "${WORKDIR}/${ROOTMP}" ] || mkdir -p "${WORKDIR}/${ROOTMP}"
	mount ${ROOTP} ${WORKDIR}/${ROOTMP}

	echo $(eval_gettext "Writing mount-points to \$WORKDIR/rpi-image-tool-mount-points") ; echo
	REALBOOTMOUNTPOINT=$(realpath ${WORKDIR}/${BOOTMP})
	REALROOTMOUNTPOINT=$(realpath ${WORKDIR}/${ROOTMP})
	echo -e "1:${BOOTP}:${REALBOOTMOUNTPOINT}\n2:${ROOTP}:${REALROOTMOUNTPOINT}" > ${WORKDIR}/rpi-image-tool-mount-points

}



new_image() {
	local WORKDIR=${1}
	local IMAGEFILE=${2}
	local BOOTMP=${3}
	local ROOTMP=${4}
	local BLOCKCOUNT=${5}
	local BLOCKSIZE=${6}
	local SPLIT=${7}	    

	echo $(gettext "Making the work directory if it doesn't exist") ; echo
	[ -d ${WORKDIR} ] || mkdir -p "${WORKDIR}"

	echo $(gettext "Running dd to make a raw (zero-filled) image") ; echo
	dd if=/dev/zero of=${IMAGEFILE} bs=${BLOCKSIZE} count=${BLOCKCOUNT}

	echo $(gettext "Partitioning the raw image file") ; echo
	parted "${IMAGEFILE}" --script -- mklabel msdos
	echo $(gettext "Making the boot partition") ; echo
	parted "${IMAGEFILE}" --script -- mkpart primary fat32 1 ${SPLIT}
	echo $(gettext "Setting the boot partition bootable") ; echo
	parted "${IMAGEFILE}" --script set 1 boot on
	echo $(gettext "Making the root partition") ; echo
	parted "${IMAGEFILE}" --script -- mkpart primary ext4 ${SPLIT} -1

	local BOOTP
	local ROOTP

	loop_devices ${WORKDIR} ${IMAGEFILE} BOOTP ROOTP

	echo $(eval_gettext "Boot partition is \$BOOTP") ; echo
	echo $(eval_gettext "Root partition is \$ROOTP}") ; echo

	sleep 5

	echo $(gettext "Making file systems") ; echo
	mkfs.vfat ${BOOTP}
	mkfs.ext4 ${ROOTP}

	mount_partitions ${WORKDIR} ${BOOTP} ${ROOTP} ${BOOTMP} ${ROOTMP}

}

prepare_device() {
	local WORKDIR=${1}
	local DEVICE=${2}
	local BOOTMP=${3}
	local ROOTMP=${4}
	local BLOCKCOUNT=${5}
	local BLOCKSIZE=${6}
	local SPLIT=${7}	   

	echo $(gettext "Making the work directory if it doesn't exist") ; echo
	[ -d ${WORKDIR} ] || mkdir -p "${WORKDIR}"

	echo $("Partitioning the device") ; echo
	parted "${DEVICE}" --script -- mklabel msdos
	echo $(gettext "Making the boot partition...") ; echo
	parted "${DEVICE}" --script -- mkpart primary fat32 1 ${SPLIT}
	echo $(gettext "Setting the boot partition bootable") ; echo
	parted "${DEVICE}" --script set 1 boot on
	echo $(gettext "Making the root partition") ; echo
	parted "${DEVICE}" --script -- mkpart primary ext4 ${SPLIT} -1

	echo $(eval_gettext "Boot partition is \${DEVICE}1") ; echo
	echo $(eval_gettext "Root partition is \${DEVICE}2") ; echo

	sleep 2

	echo $(gettext "Making file systems") ; echo
	mkfs.vfat ${DEVICE}1
	mkfs.ext4 ${DEVICE}2

	mount_partitions ${WORKDIR} ${DEVICE}1 ${DEVICE}2 ${BOOTMP} ${ROOTMP}

}

remove_loop_devices() {
	local WORKDIR=${1}	

	echo $(gettext "Removing loop devices") ; echo
	cat ${WORKDIR}/rpi-image-tool-mount-points | cut -f2 -d: | \
	while read LOOP
	do
		echo $(eval_gettext "Removing loop device \$LOOP") ; echo
		dmsetup remove "${LOOP}"
	done

}


remove_mount_points() {
	local WORKDIR=${1}

	[ -f ${WORKDIR}/rpi-image-tool-mount-points ] || { echo "${WORKDIR}/rpi-image-tool-mount-points does not exist" ; exit 1 ; }
	cat ${WORKDIR}/rpi-image-tool-mount-points | cut -f3 -d: | \
	while read MOUNTPOINT
	do
		echo $(eval_gettext "Removing \$MOUNTPOINT") ; echo
		[ -d "${MOUNTPOINT}" ] && rmdir "${MOUNTPOINT}"
	done

}

un_mount_partitions() {
	local WORKDIR=${1}

	if [ ! -f "${WORKDIR}/rpi-image-tool-mount-points" ]; then
		echo $(gettext "Could not find the file rpi-image-tool-mount-points in the work directory") ; echo
		exit 1
	fi

	echo $(gettext "umount partitions") ; echo
	cat ${WORKDIR}/rpi-image-tool-mount-points | cut -f3 -d: | \
	while read MOUNTPOINT
	do
		echo $(eval_gettext "umount \$MOUNTPOINT") ; echo
		umount "${MOUNTPOINT}"
	done

}

validate_blockcount() {
	echo "$BLOCKCOUNT" | grep "^[0-9][0-9]*$" >/dev/null
	if [ $? -eq 1 ]; then
		echo $(gettext "Bad block count") ; echo
		usage
	fi

}


validate_blocksize() {
	declare -r BLOCKSIZE=${1}
	case "$BLOCKSIZE" in
		'1M'|'1MB')
		;;
		*)
			echo $(gettext "Invalid block-size") ; echo
			usage
			exit 1
		;;
	esac

}

validate_mountpoint() {
	declare -r MOUNTPOINT=${1}
	echo $MOUNTPOINT | grep "^[\./A-Za-z0-9\-][\.A-Za-z0-9\-]*" >/dev/null
	if [ $? -eq 1 ]; then
		echo $(gettext "Bad mount-point") ; echo
		exit 1
	fi

}

validate_split() {
	local SPLIT=${1}
	echo "${SPLIT}" | grep "^[0-9][0-9]*$" >/dev/null
	if [ $? -eq 1 ]; then
		echo $(gettext "Bad split") ; echo
		usage
	fi

}

volume_is_mounted() {
	local DEVICE=${1}
	local MOUNTPOINT=${2}
	local  __RESULT=${3}

	if mount | grep "${DEVICE} on ${MOUNTPOINT} type" > /dev/null 
	then
		local MYRESULT=1
	else
		local MYRESULT=0
	fi
	eval $__RESULT="'$MYRESULT'"

}

