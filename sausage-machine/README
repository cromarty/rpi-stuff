
sausage-machine
===============

I wrote the series of scripts and other files in this tree when I was running
scripts on a Raspberry Pi in an attempt to get some accessibility tools
configured.

It is a way of running a list of bash, or other executable files, in a
controlled sequence, providing a way of switching off individual components in
the list, re-ordering them or generally configuring the way in which the scripts
in a sequence work together.

For example...

If you have a combination of three scripts which do the following things:

1.  Download the source-code for package super-gizmo.
2. Make tweaks to source and/or Makefiles of super-gizmo.
3. Run ./configure for super-gizmo.
4. Install super-gizmo.

It might be desirable to insert another script into that sequence or otherwise
mess it about.

Scripts in the 'bin' directory

hand-crank.pl

Actually make your sausages.

This is the Perl script which runs the defined sequence of scripts named in the
xxx.conf file generated by config-generator.pl or compiled by hand.

The parameters to hand-crank.pl are:

--help

Display usage text and exit.

--config=<config file>

Where <config file> is a file of the form created by config-generator detailed
below.

--log

Name of a file in which progress and other messages will be written by
hand-crank.pl.  The default is 'sausages.log'.

config-generator.pl

This script reads the contents of a directory and writes a configuration file
for hand-crank.pl.  The configuration file consists of one line per script to be
run.

Lines can be commented with the '#' character.  So to temporarily 'switch off' a
script make it a comment.  You can also add other comments.  Blank lines are
also ignored.

When this script is run, all the scripts found in the named directory are
expanded to their full path before the entries are written to the xxx.conf file
(unless you provide the --relative switch).

Parameters for config-generator are:

--help

Display help (usage) text and exit.

--config-path=<path to pack config files>

The path to the config files for the pack being processed.  Note these are files
which might be installed or otherwise used by scripts in the sequence and not
files relating to the operation of the sausage-machine scripts.

--script-path=<path to scripts>

This parameter controls the path from which a list of scripts will be
generated.  These scripts are those which represent the sequence of operations
to be run.

--relative

If this parameter is included, the scripts names will be written to the
generated configuration file with relative, e.g. not absolute paths.

--rx=<regular expression>

This parameter can be set to a Perl regular expression which will select which
files from the target directory are to be included.

The default is /.*/ which in Perl regular expression means 'every file'.

Note that it is necessary to 'escape' some characters which are used in these
regular expressions as they are to be read from the command-line.  For example a
regular expression which might be used to select only files which begin with a
lower-case 'c', would be:

/^c/

But the caret ('^') must be 'escaped' to make it work, like this:

/^^c/

Backslashes will need to be escaped also, and probably some other control
characters I have not tested.

A useful example of a regular expression to select all bash scripts in a
directory which start with a three-digit letter and which end with '.sh' would
be:

/^^[0-9]{3}.*?\\.sh/

Note the escaping of the backslash character.  It is beyond the scope of
sausage-machine documentation to discuss Perl regular expressions in detail.

exports-generator.pl

This script writes to standard output a number of lines in the format:

XXX=xxx

or:

export XXX=xxx

Depending on the parameters.

The parameters and their function are:

--help

Show help )usage text) and exit.

--build-path=xxx

A lot of the scripts in a build sequence might use a 'BUILD_PATH' variable in
them to  control where things are done.

--config-path=xxx

Sets where scripts get files which they install to control functionality of
built or installed programs.

--utils-path=xxx

Sets the path to other utilities which the script sequence might install,
seperately to packages managed in those or other scripts.

--relative

If present, this switch causes exports-generator to write the three variables
which represent paths with relative, e.g. not absolute path format.

--export

If present, prepends 'export ' onto each line written.

When exports-generator.pl writes it's output it prepends each variable with 'SM_'
to make it obvious what the variables are for.

The output from this script is typically included at the top of bash scripts in
the sequence to control paths to stuff.

If you used the --export switch the resulting output could be piped into your
.bashrc file to control build and other paths.

scite.properties

I have been doing a lot of development using an editor called scite, and this
file controls a lot of the configurations for that editor.  There are a lot of
places in the tree where you will see these files.  They are not part of the
build system and are only there to control behaviour of the editor while I work
on the scripts.

Other directories under 'sausage-machine'

Under the 'sausage-machine' directory alongside 'common' there will be one or more
directories whose names reflect what the purpose of the scripts and ancillary
files contained in them are for.

For example there may be a directory called 'raspbian-lxde-alsa'..  In this
directory are scripts I used when trying to get a bunch of stuff going on
Raspbian:

1.  eSpeak with latency tweaks.
2.  speech-dispatcher compiled for ALSA.
3.  speechd-up to connect the SpeakUp console-mode screen-reader to
speech-dispatcher.
4.  The gnome-orca screen-reader.

I am referring to these collections as 'sausage-packs'.

Under each of these directories there is typically a fixed set of other
directories, the contents of which are described below.

config

This directory contains files which form part of the configuration of packages
which the series of scripts attempts to install.  In the case of
'raspbian-lxde-alsa' this includes configuration files for speech-dispatcher and
speechd-up.

scripts

The scripts which are actually run in the 'sausage-machine' sequence.

Typically the scripts in this directory will have names which begin with
numbers.  This ensures the order of running is obvious to casual observation and
that they are listed in the running order by code which generates lists of the
scripts, such as 'config-generator.pl' described above.

utils

This directory contains other stuff that might be installed by the 'sausage-machine'
sequence but which don't necessarily relate to packages being build and/or
installed.

The observant reader will have noticed that the three directories detailed above
correspond to the three command-line parameters which can be given to the
'exports-generator.pl' script.  This is because this script controls where the
'hand-crank.pl' script, and other scripts called by it, can find these paths.

*.conf files in this directory

Also in the sausage-packs/xxxx' (for example raspbian-lxde-alsa) directory there may
be a configuration file, with the name format of 'xxx.conf'.  This
file is that which was the output of the 'config-generator.pl' script.  It
contains a line for each script to be run in the sequence.

Running a 'sausage-pack'

There are a number of steps to getting stuff ready to run, which are detailed
here.

1.  Write the scripts

Obviously there must be scripts which will be run to do stuff.  As suggested
above, scripts should be named with prefixing numbers to make running order
obvious and to aid in the correct ordering of the scripts when lists are
generated programmatically.
I suggest numbers with gaps in the sequence so that scripts can be inserted
without having to rename a whole bunch of stuff.  For example:

000-preparation.sh
100-get-super-gizmo-source.sh
200-build-super-gizmo.sh
300-install-super-gizmo.sh
999-finalize.sh

If you subsequently find you need to make some tweaks to some source or other
with 'sed' you can generate a:

150-tweak-main-c.sh

And re-run config-generator to make a new config file, or add it by hand.  Note
that if you have placed any comments in your config file, re-running
config-generator.pl and using the same outpput file name will lose your
additional comments.  You could maybe use version numbers on your config files.

Before scripts are added to a 'sausage-pack' it is a good idea to run
them individually to test each script and to check it's relationship to other
operations in the sequence.

2.  Generate the xxx.conf list

Run'config-generator.pl', passing it the path to the scripts and redirect the
output to create the xxx.conf file.  Like this:

./config-generator.pl --path=./path/to/super-gizmo > super-gizmo.conf

config-generator.pl will expand any relative path of each script found to
absolute paths and write a line for each to stdout.  Redirecting the output as
above generates our configuration file for super-gizmo.

Giving the '--relative' switch to this script stops the expansion of relative
paths to absolute paths.  You could also supply a regular expression to provide
filtering of scripts to those with names that match, using the 'rx=<regular
expression>' switch.

3.  Run 'exports-generator.pl

Running 'exports-generator.pl will write the three paths to config, script and
utils directories to stdout.  Run it like this:

./exports-generator.pl --build-path=. --config-path=./config --utils-path=./utils
> common-code

The above line generates a file called common-code which can be included in
each of the scripts in your sequence to globally set these values.  It is
included, typically, like this:

. ./common-code

As with other scripts, relative paths are expanded to absolute paths.  I used
the '.' path in the above example to mean 'this directory' but any other could
be named.

Again the '--relative' switch can be used to suppress expansion of relative
paths.

4.  hand-crank.pl

Now having generated our configuration and exports (common-code) files, it's
time to run the main device; 'hand-crank.pl'.

Run it like this:

./hand-crank.pl --config=super-gizmo.conf --log=<log file>

Which will run hand-crank.pl, which will read from the named configuration file,
which contains a list of the scripts to run.

The script will write to a log file controlled by the --log=<file name> switch.
The default if this name is not supplied is 'sausages.log'.

Remember that the 'hand-crank.pl' script may need to be run with other qualifiers,
for example, in the case of raspbian-lxde-alsa, I use:

sudo -E ./hand-crank.pl --config=raspbian-lxde-alsa.conf

The -E switch for sudo makes sure that the sausage-machine's environment is preserved,
so for example '~/where' will resolve to '/home/me/where' instead of
'/root/where'.

The 'hand-crank.pl' script checks the exit code of each script in the sequence, and
will stop for a non-zero exit code.  So it's a good idea to make sure the exit
codes of your scripts are correctly set.

I use the 'set -e' line near the top of each of my scripts so that as soon as
there is an error, the script will crash out and return the exit code of the
failed operation.  Of course this assumes that a failed operation sets a
non-zero code but that's the wonderful world of bash.

Tips

1.  Name each of your scripts with a numeric prefix and a name which adequately
describes what it does.

2.  Use the output from exports-generator.pl and name it in the top of each
script to closely control the build environment, or use the '--export' switch
with exports-generator.pl and pipe the output to the bottom of your .bashrc file.

3.  It is a good idea to choose a value for the '--build-path' parameter (and
hence the 'BUILD_PATH' variable in it's output which will place builds outside
the 'sausage-machine' directory tree.  This makes it easier to clean up behind a build
without deleting the 'sausage-machine' components.

4.  Always prick your sausages with a fork before frying so they don't explode.

Mike Ray <mike.ray@btinternet.com>
March 2014

The sausage-machine is licensed under the Gnu General Public License, version 2.
A copy of which is included with the machine components.
















