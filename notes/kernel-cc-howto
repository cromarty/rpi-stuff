
This document shows brief notes on how I cross-compile the Linux kernel on a desktop Linux machine.

It uses the kernel build scripts from bash/kernel-build in the same git repo as this document.

1.  Get the compiler tool-chain using Git.

I put this in /usr/tools like this:

cd /usr
sudo git clone git://github.com/raspberrypi/tools.git

The above takes a while because the tool-chain contains a lot of stuff.

This gives me the following directories under /usr/tools:

arm-bcm2708
configs
mkimage
pkg
sysidk

2.  Get the latest Raspberry Pi kernel source in a zip:

curl https://codeload.github.com/raspberrypi/linux/zip/rpi-3.6.y -o ./rpi-3.6.y.zip

3. Next I make the directory structure used by my kernel build scripts.  Assuming you are building from your home directory:

mkdir ~/linux-rpi-3.6.y  (change to match the version number of the kernel source you grabbed above)
cd linux-rpi-3.6.y
mkdir rpi-build
mkdir modules

The Linux kernel source will be in the Linux subdirectory and the build will take place in rpi-build.  This keeps the source tree nice and clean.

I unzip the kernel source here and rename the resulting linux-rpi-3.6.y subdirectory to just 'linux'.

Now I have three sub-directories in ~/linux-3.6.y:

linux : This contains the kernel source tree
modules : Will contain compiled modules after a full build
rpi-build : Will contain the kernel and other stuff after a build

4.  Grab my kernel build scripts (and other stuff) from git:

cd
git clone https://github.com/cromarty/rpi-stuff.git

I now create a directory to put my kernel build scripts into, so I can run them from anywhere:

sudo mkdir /usr/local/bin/mike

cd ./rpi-stuff/bash/kernel-build
sudo cp knl_* /usr/local/bin/mike
sudo chmod +x /usr/local/bin/mike/knl_*

Add /usr/local/bin/mike to your path in your .bashrc (changing mike for your path):

echo "export PATH=/usr/local/bin/mike:$PATH" >> ~/.bashrc

Add the contents of the 'exports' file to the bottom of your .bashrc file:

cd ~/rpi-stuff/bash/kernel-build
cat exports >> ~/.bashrc

Be sure to use a double right-arrow to append and not overwrite.

Either log out and log back in or do this to make your .bashrc take effect:

source ~/.bashrc

Check the environment variable $CCPREFIX and make sure it exists in /usr/tools.  It may have changed with the version of the tool-chain.  If it has changed, correct the value in your .bashrc file.

5.  Have a look at each of the 'knl_*' scripts to understand what they do and read the file:

~/rpi-stuff/bash/kernel-build/README

6. On a running Pi grab the .config file like this:

cd ~/
sudo zcat /proc/config.gz > .config

You may have a .config directory in your home directory so you should maybe send the output to a different file name until you transfer it to your desktop machine.

I sometimes create a config file with the date I grabbed it:

sudo zcat /proc/config.gz > config-yyyymmdd

Replacing yyyymmdd with the date.

The file /proc/config.gz only exists while the Pi is running, so if you mount the SD card in another Linux machine expecting to find it, you won't!

7.  Run knl_mrproper.  Make sure you have the proper paths set up in your .bashrc and have made sure they have taken effect (see part 4):

knl_mrproper

This will tidy up the rpi-build directory.

8.  Now put the config file from the Raspberry Pi in your rpi-build directory, calling it .config.  If you do this before running knl_mrproper it will disappear!

9.  It is now up to you how you run the configuration program to set options in the .config file.

Because I am blind and none of the configuration programs are especially accessible and because the only change I have made to the kernel so far is to compile the SpeakUp screen-reader, I edit .config by hand.

10.  After running whichever configuration option you prefer, run the script knl_oldconfig.

This does something funky to check and finalise the .config file.

11.  You are now ready to run:

knl_build

This will compile your kernel.  It will create a file called build.script in your home directory.  It shows the output of the kernel build.  You can check it for errors.

The 'knl_build' script will automatically optimise the make process for the number of processing cores on your machine.

On my quad-core machine running Arch Linux it takes about fifteen minutes to build a kernel.  But that's fast.  However on a Raspberry Pi it took about fifteen HOURS!

12.  Now, assuming no errors in step 11, run:

knl_modules

This will compile all the kernel modules.  It creates a file called modules.script, again in your home directory.

13.  Assuming no errors in step 12, run:

knl_imod

This creates a file called modinstall.script in your home directory which will show the result of installing the modules to the temporary modules directory.

14.  You should now have the following structure:

IN ~/linux-rpi-3.6.y:

linux:

Still just contains Linux source tree.

modules:

Will now contain a directory called 'lib'.  The contents of this directory contains stuff to go in /lib on the Pi, see below.

rpi-build:

In rpi-build/arch/arm/boot you will have a file called 'Image' (note the upper-case I).  This is the kernel and should be installed to the Raspberry Pi boot sector as 'kernel.img'.  You might want to save the old kernel first to something like 'kernel.img.old'.

15.  Installing the modules.

In ~/linux-rpi-3.6.y/modules/lib, zip up the contents of the modules and firmware directories like this:

tar -czf modules.tgz *

Deploy these modules in /lib on a Pi, either by transferring it to a running Pi or by mounting a valid SD card with a Raspberry Pi image on your Linux machine.  It's better to mount an SD card on your Linux desktop.  If you do this remember to make sure your module files have the right ownership and permissions.

Notes:

(a)  Check the $CCPREFIX in the 'exports' file from the git repo to see if the version of the tool-chain you got has changed.
(b)  The $CCPREFIX variable needs to be changed depending on whether you are compiling a hard-float or soft-float kernel.  The values in the repo are for a hard-float kernel.
(c)  Have a look at the file 'mnt_rpi_card' to see how to mount an SD card on your Linux desktop to install kernel and modules.
(d)  If you have compiled new modules it might be necessary to run 'sudo depmod' on the Pi before they can be found.
(e)  You need to look at the Makefile in the top-level of the kernel source-tree, and the CONFIG_LOCALVERSION value in the .config file to see what values will be appended to the kernel version.  This affects where the modules live and what is returned by 'uname -a'.






