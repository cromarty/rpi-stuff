#!/bin/bash


usage() {
	echo 'Usage: kbild.sh { defconfig | menuconfig | oldconfig | build | modules | modules_install | mrproper }'
}

dryrun() {
	echo 'Dry run:'
	echo "KERNEL_ROOT is: ${KERNEL_ROOT}"
	echo "CCPREFIX is:    ${CCPREFIX}"
	echo 'Kernel source tree looks good'
	echo 'CC version of gcc found and is executable'
}

# all these can be overridden by setting them in the environment
# before this script is run
[ -z "${KERNEL_ROOT}" ] && KERNEL_ROOT=/opt/linux/rpi
[ -z "${CCPREFIX}" ] && CCPREFIX=/opt/toolchains/armv7/arm-unknown-linux-gnueabihf/bin/arm-unknown-linux-gnueabihf-

[ -z "${SRC}" ] && SRC=src
[ -z "${BUILD}" ] && BUILD=build
[ -z "${MODULES}" ] && MODULES=modules
[ -z "${ARCH}" ] && ARCH=arm
[ -z "${PLATFORM}" ] && PLATFORM=bcmrpi
[ -z "${VERBOSITY}" ] && VERBOSITY=1

if [ $# != 1 ]; then
	usage
	exit 1
fi

if [ ! -f "${KERNEL_ROOT}/${SRC}/MAINTAINERS" ]; then
	echo 'The specified KERNEL_ROOT/src does not look like a kernel source tree, there is no MAINTAINERS file'
	exit 1
fi

if [ ! -x "${CCPREFIX}gcc" ]; then
	echo 'Did not find an executable gcc with the specified CCPREFIX'
	exit 1
fi

set -e

SCRIPT=$(pwd)/$1.script

case $1 in
	'help')
		usage
		exit 0
	;;
	'dryrun')
		dryrun
		exit 0
	;;
	'defconfig')
		echo 'defconfig'
		cd ${KERNEL_ROOT}/${SRC}
		make ARCH=${ARCH} PLATFORM=${PLATFORM} O=${KERNEL_ROOT}/${BUILD} CROSS_COMPILE=${CCPREFIX} defconfig
	;;
	'menuconfig')
		echo 'menuconfig'
		cd ${KERNEL_ROOT}/${SRC}
		make ARCH=${ARCH} O=${KERNEL_ROOT}/${BUILD} CROSS_COMPILE=${CCPREFIX} menuconfig
	;;
	'oldconfig')
		echo 'oldconfig'
		cd ${KERNEL_ROOT}/${SRC}
		make ARCH=${ARCH} O=${KERNEL_ROOT}/${BUILD} CROSS_COMPILE=${CCPREFIX} oldconfig
	;;
	'build')
		echo 'build'
		cd ${KERNEL_ROOT}/${SRC}
		date 2>&1 | tee ${SCRIPT}
		make V=${VERBOSITY} ARCH=${ARCH} O=${KERNEL_ROOT}/${BUILD} CROSS_COMPILE=${CCPREFIX} -j$(cat /proc/cpuinfo | grep processor | wc -l) 2>&1 | tee -a ${SCRIPT}
		RESULT=$?
		date 2>&1 | tee -a ${SCRIPT}
	;;
	'modules')
		echo 'modules'
		cd ${KERNEL_ROOT}/${SRC}
		date 2>&1 | tee > ${SCRIPT}
		make V=${VERBOSITY} ARCH=${ARCH} O=${KERNEL_ROOT}/${BUILD} CROSS_COMPILE=${CCPREFIX} modules -j$(cat /proc/cpuinfo | grep processor | wc -l) | tee -a ${SCRIPT}
		RESULT=$?
		date 2>&1 | tee -a ${SCRIPT}
	;;
	'modules_install')
		echo 'modules install'
		cd ${KERNEL_ROOT}/${SRC}
		date 2>&1 | tee ${SCRIPT}
		make ARCH=${ARCH} O=${KERNEL_ROOT}/${BUILD} CROSS_COMPILE=${CCPREFIX} INSTALL_MOD_PATH=${KERNEL_ROOT}/${MODULES} modules_install | tee -a ${SCRIPT}
		date 2>&1 | tee -a ${SCRIPT}
	;;
	'mrproper')
		echo 'mrproper'
		cd ${KERNEL_ROOT}/${SRC}
		make O=${KERNEL_ROOT}/${BUILD} mrproper
	;;
	*)
		usage
		exit 1
	;;
esac


echo "Exit $1 with result code: ${RESULT}"

