#!/bin/bash

if [ -f ~/.kccrc ]; then
	echo 'Setting environment from ~/.kccrc'
	. ~/.kccrc
fi


# all these can be overridden by setting them in the environment
# before this script is run
[ -z "${KERNEL_ROOT}" ] && KERNEL_ROOT=/opt/linux/rpi
[ -z "${CCPREFIX}" ] && CCPREFIX=/opt/toolchains/armv7/arm-unknown-linux-gnueabihf/bin/arm-unknown-linux-gnueabihf-
[ -z "${SRC}" ] && SRC=src
[ -z "${BUILD}" ] && BUILD=build
[ -z "${MODULES}" ] && MODULES=modules

[ -z "${ARCH}" ] && ARCH=arm
[ -z "${PLATFORM}" ] && PLATFORM=bcmrpi
[ -z "${VERBOSITY}" ] && VERBOSITY=1

if [ $# != 1 ]; then
	echo 'Usage: kcc.sh { defconfig | menuconfig | oldconfig | build | modules | modules_install | mrproper }'
	exit 1
fi


if [[ ! -d "${KERNEL_ROOT}/${SRC}" || ! -r "${KERNEL_ROOT}/${SRC}" ]]; then
	echo 'Specified kernel root not found or not readable. Build will stop'
	exit 1
fi

echo 'Specified kernel source path exists and is writable...'

if [ ! -f "${KERNEL_ROOT}/${SRC}/MAINTAINERS" ]; then
	echo 'Did not find a MAINTAINERS file in the specified Kernel source tree. Build will stop'
	exit 1
fi

echo 'Specified Kernel source tree looks good, found the MAINTAINERS file...'

if [[ ! -d "${KERNEL_ROOT}/${BUILD}" || ! -w "${KERNEL_ROOT}/${BUILD}" ]]; then
	echo 'Specified build directory not found or is not writable. Build will stop'
	exit 1
fi

echo 'Build path found and is writable...'

if [[ ! -d "${KERNEL_ROOT}/${MODULES}" || ! -w "${KERNEL_ROOT}/${MODULES}" ]]; then
	echo 'Specified modules directory not found or is not writable. Build will stop'
	exit 1
fi

echo 'Module path found and is writable...'


if [ ! -x "${CCPREFIX}gcc" ]; then
	echo 'Did not find an executable gcc with the specified CCPREFIX. Build will stop'
	exit 1
fi

echo 'Cross-compiler found and is executable...'

echo "KERNEL_ROOT = ${KERNEL_ROOT}"
echo "SRC         = ${SRC}"
echo "BUILD       = ${BUILD}"
echo "MODULES     = ${MODULES}"
echo "CCPREFIX    = ${CCPREFIX}"
echo "ARCH        = ${ARCH}"
echo "PLATFORM    = ${PLATFORM}"

# temporarily set path locally to include cc prefix path
PATH=$(dirname ${CCPREFIX}gcc):${PATH}

set -e

SCRIPT=$(pwd)/$1.script

case $1 in
	'help')
		echo 'Usage: kcc.sh { defconfig | menuconfig | oldconfig | build | modules | modules_install | mrproper }'
		exit 0
	;;
	'dryrun')
		echo 'dryrun specified on command-line. stop'
		exit 0
	;;
	'defconfig')
		echo 'defconfig'
		cd ${KERNEL_ROOT}/${SRC}
		make ARCH=${ARCH} PLATFORM=${PLATFORM} O=${KERNEL_ROOT}/${BUILD} CROSS_COMPILE=${CCPREFIX} defconfig
	;;
	'menuconfig')
		echo 'menuconfig'
		cd ${KERNEL_ROOT}/${SRC}
		make ARCH=${ARCH} O=${KERNEL_ROOT}/${BUILD} CROSS_COMPILE=${CCPREFIX} menuconfig
	;;
	'oldconfig')
		echo 'oldconfig'
		cd ${KERNEL_ROOT}/${SRC}
		make ARCH=${ARCH} O=${KERNEL_ROOT}/${BUILD} CROSS_COMPILE=${CCPREFIX} oldconfig
	;;
	'build')
		echo 'build'
		cd ${KERNEL_ROOT}/${SRC}
		date 2>&1 | tee ${SCRIPT}
		make V=${VERBOSITY} ARCH=${ARCH} O=${KERNEL_ROOT}/${BUILD} CROSS_COMPILE=${CCPREFIX} -j$(cat /proc/cpuinfo | grep processor | wc -l) 2>&1 | tee -a ${SCRIPT}
		RESULT=$?
		date 2>&1 | tee -a ${SCRIPT}
	;;
	'modules')
		echo 'modules'
		cd ${KERNEL_ROOT}/${SRC}
		date 2>&1 | tee > ${SCRIPT}
		make V=${VERBOSITY} ARCH=${ARCH} O=${KERNEL_ROOT}/${BUILD} CROSS_COMPILE=${CCPREFIX} modules -j$(cat /proc/cpuinfo | grep processor | wc -l) | tee -a ${SCRIPT}
		RESULT=$?
		date 2>&1 | tee -a ${SCRIPT}
	;;
	'modules_install')
		echo 'modules install'
		cd ${KERNEL_ROOT}/${SRC}
		date 2>&1 | tee ${SCRIPT}
		make ARCH=${ARCH} O=${KERNEL_ROOT}/${BUILD} CROSS_COMPILE=${CCPREFIX} INSTALL_MOD_PATH=${KERNEL_ROOT}/${MODULES} modules_install | tee -a ${SCRIPT}
		date 2>&1 | tee -a ${SCRIPT}
	;;
	'mrproper')
		echo 'mrproper'
		cd ${KERNEL_ROOT}/${SRC}
		make O=${KERNEL_ROOT}/${BUILD} mrproper
	;;
	*)
		usage
		exit 1
	;;
esac


echo "Exit $1 with result code: ${RESULT}"

